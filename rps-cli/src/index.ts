/*
 * This file is the main driver for the Midnight bulletin board example.
 * The entry point is the run function, at the end of the file.
 * We expect the startup files (testnet-remote.ts, standalone.ts, etc.) to
 * call run with some specific configuration that sets the network addresses
 * of the servers this file relies on.
 */

import {createInterface, type Interface} from 'node:readline/promises';
import {stdin as input, stdout as output} from 'node:process';
import {WebSocket} from 'ws';
// import { webcrypto } from 'crypto';
import {
  type DeployedRPSContract,
  type PrivateStateId,
  RPSAPI, RPSDerivedState,
  rpsPrivateStateKey,
  type RPSProviders,
  utils,
} from '../../api/src/index';
import {GAME_STATE, type Ledger, ledger, PLAY} from '../../contract/src/managed/rock_paper_scissors/contract/index.cjs';
import {
  type BalancedTransaction,
  createBalancedTx,
  type MidnightProvider,
  type UnbalancedTransaction,
  type WalletProvider,
} from '@midnight-ntwrk/midnight-js-types';
import {type Wallet} from '@midnight-ntwrk/wallet-api';
import * as Rx from 'rxjs';
import {type CoinInfo, nativeToken, Transaction, type TransactionId} from '@midnight-ntwrk/ledger';
import {Transaction as ZswapTransaction} from '@midnight-ntwrk/zswap';
import {NodeZkConfigProvider} from '@midnight-ntwrk/midnight-js-node-zk-config-provider';
import {type Resource, WalletBuilder} from '@midnight-ntwrk/wallet';
import {indexerPublicDataProvider} from '@midnight-ntwrk/midnight-js-indexer-public-data-provider';
import {httpClientProofProvider} from '@midnight-ntwrk/midnight-js-http-client-proof-provider';
import {type Logger} from 'pino';
import {type Config, StandaloneConfig} from './config.js';
import type {DockerComposeEnvironment, StartedDockerComposeEnvironment} from 'testcontainers';
import {levelPrivateStateProvider} from '@midnight-ntwrk/midnight-js-level-private-state-provider';
import {type ContractAddress} from '@midnight-ntwrk/compact-runtime';
import {assertIsContractAddress, toHex} from '@midnight-ntwrk/midnight-js-utils';
import {getLedgerNetworkId, getZswapNetworkId} from '@midnight-ntwrk/midnight-js-network-id';
import {stringToBytes32} from "../../contract/src/test/utils";

// @ts-expect-error: It's needed to enable WebSocket usage through apollo
globalThis.WebSocket = WebSocket;

/* **********************************************************************
 * getBBoardLedgerState: a helper that queries the current state of
 * the data on the ledger, for a specific bulletin board contract.
 * Note that the Ledger type returned here is not some generic,
 * abstract ledger object, but specifically the type generated by
 * the Compact compiler to correspond to the ledger declaration
 * in the bulletin board contract.
 */

export const getRPSLedgerState = async (
  providers: RPSProviders,
  contractAddress: ContractAddress,
): Promise<Ledger | null> => {
  assertIsContractAddress(contractAddress);
  const contractState = await providers.publicDataProvider.queryContractState(contractAddress);
  return contractState != null ? ledger(contractState.data) : null;
};
// providers.publicDataProvider
//   .queryContractState(contractAddress)
//   .then((contractState) => (contractState != null ? ledger(contractState.data) : null));

/* **********************************************************************
 * deployOrJoin: returns a contract, by prompting the user about
 * whether to deploy a new one or join an existing one and then
 * calling the appropriate helper.
 */

const DEPLOY_OR_JOIN_QUESTION = `
You can do one of the following:
  1. Deploy a new Rock-Paper-Scissors board contract
  2. Join an existing Rock-Paper-Scissors contract
  3. Exit
Which would you like to do? `;

const deployOrJoin = async (providers: RPSProviders, rli: Interface, logger: Logger): Promise<RPSAPI | null> => {
  let api: RPSAPI | null = null;

  while (true) {
    const choice = await rli.question(DEPLOY_OR_JOIN_QUESTION);
    switch (choice) {
      case '1':
        api = await RPSAPI.deploy(providers, logger);
        logger.info(`Deployed contract at address: ${api.deployedContractAddress}`);
        return api;
      case '2':
        api = await RPSAPI.join(providers, await rli.question('What is the contract address (in hex)? '), logger);
        logger.info(`Joined contract at address: ${api.deployedContractAddress}`);
        return api;
      case '3':
        logger.info('Exiting...');
        return null;
      default:
        logger.error(`Invalid choice: ${choice}`);
    }
  }
};

/* **********************************************************************
 * displayLedgerState: shows the values of each of the fields declared
 * by the contract to be in the ledger state of the bulletin board.
 */

const displayLedgerState = async (
  providers: RPSProviders,
  deployedBBoardContract: DeployedRPSContract,
  logger: Logger,
): Promise<void> => {
  const contractAddress = deployedBBoardContract.deployTxData.public.contractAddress;
  const ledgerState = await getRPSLedgerState(providers, contractAddress);
  if (ledgerState === null) {
    logger.info(`There is no contract deployed at ${contractAddress}`);
  } else {
    // let gameState: string;
    // switch (ledgerState.game_state) {
    //   case GAME_STATE.deciding:
    //     gameState = "Deciding"; break;
    //   case GAME_STATE.proving:
    //     gameState = "Proving"; break;
    //   case GAME_STATE.finished:
    //     gameState = "Finished"; break;
    // }
    logger.info(`Current full state is: '${serializeLedger(ledgerState)}'`);
  }
};

function serializeLedger(ledger: Ledger): string {
  return JSON.stringify(ledger, (_, value) => {
    if (value instanceof Uint8Array) {
      return Array.from(value); // convert to array of numbers
    }
    return value;
  });
}

/* **********************************************************************
 * displayPrivateState: shows the hex-formatted value of the secret key.
 */

const displayPrivateState = async (providers: RPSProviders, logger: Logger): Promise<void> => {
  const privateState = await providers.privateStateProvider.get(rpsPrivateStateKey);
  if (privateState === null) {
    logger.info(`There is no existing bulletin board private state`);
  } else {
    logger.info(`Current secret key is: ${toHex(privateState.localGameSecretKey)}`);
  }
};

/* **********************************************************************
 * displayDerivedState: shows the values of derived state which is made
 * by combining the ledger state with private state. In this example, the
 * derived state compares the poster key with the private secret key to
 * determine if the current user is the poster of the current message.
 */

const displayDerivedState = (ledgerState: RPSDerivedState | undefined, logger: Logger) => {
  // if (ledgerState === undefined) {
  //   logger.info(`No bulletin board state currently available`);
  // } else {
  //   const boardState = ledgerState.state === STATE.occupied ? 'occupied' : 'vacant';
  //   const latestMessage = ledgerState.state === STATE.occupied ? ledgerState.message : 'none';
  //   logger.info(`Current state is: '${boardState}'`);
  //   logger.info(`Current message is: '${latestMessage}'`);
  //   logger.info(`Current instance is: ${ledgerState.instance}`);
  //   logger.info(`Current poster is: '${ledgerState.isOwner ? 'you' : 'not you'}'`);
  // }
  logger.info("Despu√©s lo implemento");
};

/* **********************************************************************
 * mainLoop: the main interactive menu of the bulletin board CLI.
 * Before starting the loop, the user is prompted to deploy a new
 * contract or join an existing one.
 */

const MAIN_LOOP_QUESTION = `
You can do one of the following:
  1. Submit a secret play on player A
  2. Submit a secret play on player B
  3. Advance to revealing phase
  4. Reveal the move of player A
  5. Reveal the move of player B
  6. Compare and finish game
  7. Restart game
  8. Display the current ledger state (known by everyone)
  9. Display the current private state (known only to this DApp instance)
  10. Display the current derived state (known only to this DApp instance)
  0. Exit
Which would you like to do? `;

const PLAY_OPTIONS_QUESTION = `
1. Rock
2. Paper
3. Scissors
`

const queryMove = async (rli: Interface, logger: Logger): Promise<PLAY> => {
  const play_choice = await rli.question(PLAY_OPTIONS_QUESTION);
  let chosen_play: PLAY;
  switch (play_choice) {
    case "1":
      chosen_play = PLAY.rock; break;
    case "2":
      chosen_play = PLAY.paper; break;
    case "3":
      chosen_play = PLAY.scissors; break;
    default:
      logger.error(`Invalid choice: ${play_choice}`);
      throw Error("Have you never played rock paper scissors?");
  }
  return chosen_play
}

const mainLoop = async (providers: RPSProviders, rli: Interface, logger: Logger): Promise<void> => {
  const rpsApi = await deployOrJoin(providers, rli, logger);
  if (rpsApi === null) {
    return;
  }
  let currentState: RPSDerivedState | undefined;
  const stateObserver = {
    next: (state: RPSDerivedState) => (currentState = state),
  };
  const subscription = rpsApi.state$.subscribe(stateObserver);
  try {
    while (true) {
      const choice = await rli.question(MAIN_LOOP_QUESTION);
      switch (choice) {

        case '1': {
          let chosen_play: PLAY = await queryMove(rli, logger);
          const name = await rli.question(`What name do you want to play with?`);
          await rpsApi.choose_encrypted_a(chosen_play, stringToBytes32(name));
          break;
        }

        case '2': {
          let chosen_play: PLAY = await queryMove(rli, logger);
          const name = await rli.question(`What name do you want to play with?`);
          await rpsApi.choose_encrypted_b(chosen_play, stringToBytes32(name));
          break;
        }

        case '3': {
          logger.info('Moving to reveal phase');
          await rpsApi.move_to_reveal();
          break;
        }

        case '4': {
          logger.info('Select your previous move as Player A');
          let previous_play: PLAY = await queryMove(rli, logger);
          const name = await rli.question(`What name did you play with?`);
          await rpsApi.reveal_a(previous_play, stringToBytes32(name))
          break;
        }

        case '5': {
          logger.info('Select your previous move as Player B');
          let previous_play: PLAY = await queryMove(rli, logger);
          const name = await rli.question(`What name did you play with?`);
          await rpsApi.reveal_b(previous_play, stringToBytes32(name))
          break;
        }

        case '6': {
          logger.info('Comparing and resolving');
          await rpsApi.compare_and_resolve();
          break;
        }

        case '7': {
          logger.info('Restarting game');
          await rpsApi.restart_game();
          break;
        }

        case '8':
          await displayLedgerState(providers, rpsApi.deployedContract, logger);
          break;

        case '9':
          await displayPrivateState(providers, logger);
          break;

        case '10':
          displayDerivedState(currentState, logger);
          break;

        case '0':
          logger.info('Exiting...');
          return;

        default:
          logger.error(`Invalid choice: ${choice}`);
      }
    }
  } finally {
    // While we allow errors to bubble up to the 'run' function, we will always need to dispose of the state
    // subscription when we exit.
    await displayLedgerState(providers, rpsApi.deployedContract, logger);
    subscription.unsubscribe();
  }
};

/* **********************************************************************
 * createWalletAndMidnightProvider: returns an object that
 * satifies both the WalletProvider and MidnightProvider
 * interfaces, both implemented in terms of the given wallet.
 */

const createWalletAndMidnightProvider = async (wallet: Wallet): Promise<WalletProvider & MidnightProvider> => {
  const state = await Rx.firstValueFrom(wallet.state());
  return {
    coinPublicKey: state.coinPublicKey,
    encryptionPublicKey: state.encryptionPublicKey,
    balanceTx(tx: UnbalancedTransaction, newCoins: CoinInfo[]): Promise<BalancedTransaction> {
      return wallet
        .balanceTransaction(
          ZswapTransaction.deserialize(tx.serialize(getLedgerNetworkId()), getZswapNetworkId()),
          newCoins,
        )
        .then((tx) => wallet.proveTransaction(tx))
        .then((zswapTx) => Transaction.deserialize(zswapTx.serialize(getZswapNetworkId()), getLedgerNetworkId()))
        .then(createBalancedTx);
    },
    submitTx(tx: BalancedTransaction): Promise<TransactionId> {
      return wallet.submitTransaction(tx);
    },
  };
};

/* **********************************************************************
 * waitForFunds: wait for tokens to appear in a wallet.
 *
 * This is an interesting example of watching the stream of states
 * coming from the pub-sub indexer.  It watches both
 *  1. how close the state is to present reality and
 *  2. the balance held by the wallet.
 */

const waitForFunds = (wallet: Wallet, logger: Logger) =>
  Rx.firstValueFrom(
    wallet.state().pipe(
      Rx.throttleTime(10_000),
      Rx.tap((state) => {
        const scanned = state.syncProgress?.synced ?? 0n;
        const behind = state.syncProgress?.lag.applyGap.toString() ?? 'unknown number';
        logger.info(`Wallet processed ${scanned} indices, remaining ${behind}`);
      }),
      Rx.filter((state) => {
        // Let's allow progress only if wallet is close enough
        const synced = typeof state.syncProgress?.synced === 'bigint' ? state.syncProgress.synced : 0n;
        const total = typeof state.syncProgress?.lag?.applyGap === 'bigint' ? state.syncProgress.lag.applyGap : 1_000n;
        return total - synced < 100n;
      }),
      Rx.map((s) => s.balances[nativeToken()] ?? 0n),
      Rx.filter((balance) => balance > 0n),
    ),
  );

/* **********************************************************************
 * buildWalletAndWaitForFunds: the main function that creates a wallet
 * and waits for tokens to appear in it.  The various "buildWallet"
 * functions all arrive here after collecting information for the
 * arguments.
 */

const buildWalletAndWaitForFunds = async (
  { indexer, indexerWS, node, proofServer }: Config,
  logger: Logger,
  seed: string,
): Promise<Wallet & Resource> => {
  const wallet = await WalletBuilder.buildFromSeed(
    indexer,
    indexerWS,
    proofServer,
    node,
    seed,
    getZswapNetworkId(),
    'warn',
  );
  wallet.start();
  const state = await Rx.firstValueFrom(wallet.state());
  logger.info(`Your wallet seed is: ${seed}`);
  logger.info(`Your wallet address is: ${state.address}`);
  let balance = state.balances[nativeToken()];
  if (balance === undefined || balance === 0n) {
    logger.info(`Your wallet balance is: 0`);
    logger.info(`Waiting to receive tokens...`);
    balance = await waitForFunds(wallet, logger);
  }
  logger.info(`Your wallet balance is: ${balance}`);
  return wallet;
};

// Generate a random see and create the wallet with that.
const buildFreshWallet = async (config: Config, logger: Logger): Promise<Wallet & Resource> =>
  await buildWalletAndWaitForFunds(config, logger, toHex(utils.randomBytes(32)));

// Prompt for a seed and create the wallet with that.
const buildWalletFromSeed = async (config: Config, rli: Interface, logger: Logger): Promise<Wallet & Resource> => {
  const seed = await rli.question('Enter your wallet seed: ');
  return await buildWalletAndWaitForFunds(config, logger, seed);
};

/* ***********************************************************************
 * This seed gives access to tokens minted in the genesis block of a local development node - only
 * used in standalone networks to build a wallet with initial funds.
 */
const GENESIS_MINT_WALLET_SEED = '0000000000000000000000000000000000000000000000000000000000000001';

/* **********************************************************************
 * buildWallet: unless running in a standalone (offline) mode,
 * prompt the user to tell us whether to create a new wallet
 * or recreate one from a prior seed.
 */

const WALLET_LOOP_QUESTION = `
You can do one of the following:
  1. Build a fresh wallet
  2. Build wallet from a seed
  3. Exit
Which would you like to do? `;

const buildWallet = async (config: Config, rli: Interface, logger: Logger): Promise<(Wallet & Resource) | null> => {
  if (config instanceof StandaloneConfig) {
    return await buildWalletAndWaitForFunds(config, logger, GENESIS_MINT_WALLET_SEED);
  }
  while (true) {
    const choice = await rli.question(WALLET_LOOP_QUESTION);
    switch (choice) {
      case '1':
        return await buildFreshWallet(config, logger);
      case '2':
        return await buildWalletFromSeed(config, rli, logger);
      case '3':
        logger.info('Exiting...');
        return null;
      default:
        logger.error(`Invalid choice: ${choice}`);
    }
  }
};

const mapContainerPort = (env: StartedDockerComposeEnvironment, url: string, containerName: string) => {
  const mappedUrl = new URL(url);
  const container = env.getContainer(containerName);

  mappedUrl.port = String(container.getFirstMappedPort());

  return mappedUrl.toString().replace(/\/+$/, '');
};

/* **********************************************************************
 * run: the main entry point that starts the whole bulletin board CLI.
 *
 * If called with a Docker environment argument, the application
 * will wait for Docker to be ready before doing anything else.
 */

export const run = async (config: Config, logger: Logger, dockerEnv?: DockerComposeEnvironment): Promise<void> => {
  const rli = createInterface({ input, output, terminal: true });
  let env;
  if (dockerEnv !== undefined) {
    env = await dockerEnv.up();

    if (config instanceof StandaloneConfig) {
      config.indexer = mapContainerPort(env, config.indexer, 'bboard-indexer');
      config.indexerWS = mapContainerPort(env, config.indexerWS, 'bboard-indexer');
      config.node = mapContainerPort(env, config.node, 'bboard-node');
      config.proofServer = mapContainerPort(env, config.proofServer, 'bboard-proof-server');
    }
  }
  const wallet = await buildWallet(config, rli, logger);
  try {
    if (wallet !== null) {
      const walletAndMidnightProvider = await createWalletAndMidnightProvider(wallet);
      const providers = {
        privateStateProvider: levelPrivateStateProvider<PrivateStateId>({
          privateStateStoreName: config.privateStateStoreName,
        }),
        publicDataProvider: indexerPublicDataProvider(config.indexer, config.indexerWS),
        zkConfigProvider: new NodeZkConfigProvider<
            "choose_encrypted_a" |
            "choose_encrypted_b" |
            "move_to_reveal" |
            "reveal_a" |
            "reveal_b" |
            "compare_and_resolve" |
            "restart_game">(config.zkConfigPath),
        proofProvider: httpClientProofProvider(config.proofServer),
        walletProvider: walletAndMidnightProvider,
        midnightProvider: walletAndMidnightProvider,
      };
      await mainLoop(providers, rli, logger);
    }
  } catch (e) {
    logError(logger, e);
    logger.info('Exiting...');
  } finally {
    try {
      rli.close();
      rli.removeAllListeners();
    } catch (e) {
      logError(logger, e);
    } finally {
      try {
        if (wallet !== null) {
          await wallet.close();
        }
      } catch (e) {
        logError(logger, e);
      } finally {
        try {
          if (env !== undefined) {
            await env.down();
            logger.info('Goodbye');
            process.exit(0);
          }
        } catch (e) {
          logError(logger, e);
        }
      }
    }
  }
};

function logError(logger: Logger, e: unknown) {
  if (e instanceof Error) {
    logger.error(`Found error '${e.message}'`);
    logger.debug(`${e.stack}`);
  } else {
    logger.error(`Found error (unknown type)`);
  }
}
